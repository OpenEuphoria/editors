<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<!--
copyright   : (C) 2004 by Irv Mullins
email       : irvm at ellijay dot com

last change : 2012-01-03 for Euphoria 4.1 by Matt Lewis

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the
Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA  02110-1301, USA.

-->

<!-- Store this in ~/.kde/share/apps/katepart/syntax/ -->

<language name="Euphoria" version="4.1" kateversion="3.7.3" section="Scripts" extensions="*.e;*.ew;*.eu;*.ex;*.exw;*.exu;*.E;*.EW;*.EU;*.EX;*.EXW;*.EXU" mimetype="text/x-euphoria" author="Irv Mullins (irvm@ellijay.com)" license="LGPL">

<highlighting>
	<list name="keywords">
		<item> abort </item>
		<item> addressof </item>
		<item> allow_break </item>
		<item> and_bits </item>
		<item> and </item>
		<item> append </item>
		<item> arccos </item>
		<item> arcsin </item>
		<item> arctan </item>
		<item> begin </item>
		<item> break </item>
		<item> by </item>
		<item> call_func </item>
		<item> call </item>
		<item> call_proc </item>
		<item> case </item>
		<item> c_func </item>
		<item> clear_screen </item>
		<item> close </item>
		<item> command_line </item>
		<item> compare </item>
		<item> continue </item>
		<item> cos </item>
		<item> c_proc </item>
		<item> date </item>
		<item> delete </item>
		<item> delete_routine </item>
		<item> do </item>
		<item> elsedef </item>
		<item> else </item>
		<item> elsif </item>
		<item> end </item>
		<item> entry </item>
		<item> equal </item>
		<item> exit </item>
		<item> fallthru </item>
		<item> find_from </item>
		<item> find </item>
		<item> floor </item>
		<item> flush </item>
		<item> for </item>
		<item> function </item>
		<item> getc </item>
		<item> getenv </item>
		<item> gets </item>
		<item> goto </item>
		<item> hash </item>
		<item> head </item>
		<item> if </item>
		<item> include_paths </item>
		<item> insert </item>
		<item> label </item>
		<item> length </item>
		<item> log </item>
		<item> loop </item>
		<item> machine_func </item>
		<item> machine_proc </item>
		<item> match_from </item>
		<item> match </item>
		<item> mem_copy </item>
		<item> mem_set </item>
		<item> not_bits </item>
		<item> not </item>
		<item> offsetof </item>
		<item> of </item>
		<item> open </item>
		<item> or_bits </item>
		<item> or </item>
		<item> override </item>
		<item> peek2s </item>
		<item> peek2u </item>
		<item> peek4 </item>
		<item> peek4s </item>
		<item> peek4u </item>
		<item> peek8s </item>
		<item> peek8u </item>
		<item> peek </item>
		<item> peek_pointer </item>
		<item> peeks </item>
		<item> peek_string </item>
		<item> platform </item>
		<item> poke2 </item>
		<item> poke4 </item>
		<item> poke8 </item>
		<item> poke </item>
		<item> poke_pointer </item>
		<item> position </item>
		<item> power </item>
		<item> prepend </item>
		<item> printf </item>
		<item> print </item>
		<item> procedure </item>
		<item> profile </item>
		<item> puts </item>
		<item> rand </item>
		<item> remainder </item>
		<item> remove </item>
		<item> repeat </item>
		<item> replace </item>
		<item> retry </item>
		<item> return </item>
		<item> routine_id </item>
		<item> routine </item>
		<item> sin </item>
		<item> splice </item>
		<item> sprintf </item>
		<item> sqrt </item>
		<item> switch </item>
		<item> system_exec </item>
		<item> system </item>
		<item> tail </item>
		<item> tan </item>
		<item> task_clock_start </item>
		<item> task_clock_stop </item>
		<item> task_create </item>
		<item> task_list </item>
		<item> task_schedule </item>
		<item> task_self </item>
		<item> task_status </item>
		<item> task_suspend </item>
		<item> task_yield </item>
		<item> then </item>
		<item> time </item>
		<item> to </item>
		<item> trace </item>
		<item> type </item>
		<item> until </item>
		<item> warning </item>
		<item> while </item>
		<item> xor_bits </item>
		<item> xor </item>
	</list>

	<list name="types">
		<item> as </item>
		<item> atom </item>
		<item> constant </item>
		<item> enum </item>
		<item> export </item>
		<item> public </item>
		<item> global </item>
		<item> deprecate </item>
		<item> integer </item>
		<item> object </item>
		<item> sequence </item>
		<item> type </item>
	</list>

	<list name="ifdefs">
		<item> ifdef </item>
		<item> elsifdef </item>
	</list>
	
	<list name="memstruct_primitives">
		<item> char </item>
		<item> unsigned </item>
		<item> signed </item>
		<item> short </item>
		<item> long </item>
		<item> int </item>
		<item> object </item>
		<item> double </item>
		<item> eudouble </item>
		<item> pointer </item>
	</list>
	
	<list name="memstruct_declaration">
		<item> memstruct </item>
		<item> memunion </item>
	</list>
	
	<list name="memtype_declaration">
		<item> memtype </item>
	</list>
	
	<list name="with_without">
		<item> with </item>
		<item> without </item>
	</list>
	
	<list name="with_directives">
		<item> define </item>
		<item> trace </item>
		<item> profile </item>
		<item> profile_time </item>
		<item> type_check </item>
		<item> warning </item>
		<item> indirect_includes </item>
		<item> inline </item>
	</list>
	
	<list name="ifdef_conditions">
		<item> and </item>
		<item> or </item>
		<item> not </item>
	</list>
	<contexts>
			
		<context attribute="Normal Text" lineEndContext="#stay" name="Normal">
			<DetectSpaces/>
			<!--
				NB: case else should start a new region, but currently, Kate crashes when we use a lookAhead read
				below to end the regCase region with "end switch", so we'll just not start a region at "case else".
				Of course, this might mess up folding for code without a "case else".
			-->
			<RegExpr attribute="Keyword" context="#stay" String="\bcase\s+else\b" endRegion="regCase" />
			<RegExpr attribute="Keyword" context="#stay" String="\bcase\b" endRegion="regCase" beginRegion="regCase"/>
			
			<!--<RegExpr attribute="Keyword" context="#stay" lookAhead="true" String="\bend\s+switch\b" endRegion="regCase"/>-->
			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+switch\b" endRegion="regSwitch"/>
			<RegExpr attribute="Keyword" context="#stay" String="\bswitch\b" beginRegion="regSwitch"/>
			
			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+for\b" endRegion="regFor"/>
			<RegExpr attribute="Keyword" context="#stay" String="\bfor\b" beginRegion="regFor"/>

			<RegExpr attribute="Keyword" context="#stay" String="\belsif\b" endRegion="regIf" beginRegion="regIf"/>
			<RegExpr attribute="Keyword" context="#stay" String="\belse\b" endRegion="regIf" beginRegion="regIf"/>
			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+if\b" endRegion="regIf"/>
			<RegExpr attribute="Keyword" context="#stay" String="\bif\b" beginRegion="regIf"/>
			
			<keyword attribute="Keyword" context="IfDef" String="ifdefs" endRegion="regIfDef" beginRegion="regIfDef"/>
			
			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+ifdef\b" endRegion="regIfDef"/>
			<RegExpr attribute="Keyword" context="#stay" String="\belsifdef\b" endRegion="regIfDef" beginRegion="regIfDef"/>
			<RegExpr attribute="Keyword" context="#stay" String="\belsedef\b" endRegion="regIfDef" beginRegion="regIfDef"/>
			<RegExpr attribute="Keyword" context="#stay" String="\bifdef\b" beginRegion="regIfDef"/>

			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+function\b" endRegion="regFunction"/>
			<RegExpr attribute="Keyword" context="#stay" String="\bfunction\b" beginRegion="regFunction"/>

			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+procedure\b" endRegion="regProcedure"/>
			<RegExpr attribute="Keyword" context="#stay" String="\bprocedure\b" beginRegion="regProcedure"/>

			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+while\b" endRegion="regWhile"/>
			<RegExpr attribute="Keyword" context="#stay" String="\bwhile\b" beginRegion="regWhile"/>

			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+type\b" endRegion="regType"/>
			<RegExpr attribute="Keyword" context="#stay" String="\btype\b" beginRegion="regType"/>
			
			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+enum\s+type\b" endRegion="regType"/>
			<RegExpr attribute="Keyword" context="#stay" String="\benum\s+type\b" beginRegion="regType"/>
			
			<RegExpr attribute="Keyword" context="#stay" String="\bend\s+loop\b" endRegion="regLoop"/>
			<RegExpr attribute="Keyword" context="#stay" String="\bend\sloop\b" endRegion="regLoop"/>

			<keyword attribute="Keyword" String="with_without" context="With Directive" firstNonSpace="true"/>
			
			<keyword attribute="Keyword" context="#stay" String="keywords"/>
			<keyword attribute="Type" String="types"/>
			<keyword attribute="Keyword" context="Memstruct" String="memstruct_declaration" beginRegion="regMemstruct"/>
			
			<Float attribute="Float" context="#stay"/>
			<DetectChar attribute="Hex" context="Hex" char="#"/>
			<HlCHex attribute="Hex" context="Hex"/>
			<Int attribute="Number" context="Number"/>
			
			<StringDetect attribute="String" String="&quot;&quot;&quot;" context="QQQ-string" beginRegion="QQQ-region"/>
			<StringDetect attribute="String" String="`" context="BQ-string" beginRegion="BQ-region"/>
			<DetectChar attribute="String" context="String" char="&quot;" />
			<DetectChar attribute="String" context="SQ-String" char="'" />
			
			<Detect2Chars attribute="Comment" context="Comment" char="-" char1="-"/>
			<Detect2Chars attribute="Comment" context="Comment Multi" char="/" char1="*" beginRegion="Comment"/>
			
			<WordDetect attribute="Type" String="include" context="Include Line" firstNonSpace="true"/>
			<WordDetect attribute="Keyword" String="namespace" context="Namespace Declaration"/>
			<keyword attribute="Keyword" String="memtype_declaration" context="Memtype" beginRegion="regMemtype"/>
			<RegExpr attribute="Keyword" String="\bsizeof\b" context="Size Of"/>
			<AnyChar String="$?" attribute="Keyword"/>
			
			<AnyChar String=",./+=-*!&amp;:|[]&lt;&gt;" attribute="Symbol" context="#stay"/>
			<DetectChar attribute="Symbol" char="{" context="#stay" beginRegion="regSequence"/>
			<DetectChar attribute="Symbol" char="}" context="#stay" endRegion="regSequence"/>
		</context>

		<context attribute="String" lineEndContext="#stay" name="String">
		  <HlCStringChar attribute="String Char" context="#stay"/>
		  <DetectChar attribute="String" context="#pop" char="&quot;"/>
		</context>
		
		<context attribute="String" lineEndContext="#stay" name="SQ-String">
		  <HlCStringChar attribute="String Char" context="#stay"/>
		  <DetectChar attribute="String" context="#pop" char="'"/>
		</context>
		
		<context name="QQQ-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
			<HlCStringChar attribute="String Char" context="#stay"/>
			<StringDetect attribute="String" String="&quot;&quot;&quot;" context="#pop" endRegion="QQQ-region"/>
		</context>
		<context name="BQ-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
			<HlCStringChar attribute="String Char" context="#stay"/>
			<StringDetect attribute="String" String="`" context="#pop" endRegion="BQ-region"/>
		</context>
		
		<context attribute="Comment" lineEndContext="#pop" name="Comment">
			<keyword attribute="Number" context="#stay" String="attention" />
		</context>
		<context attribute="Comment" lineEndContext="#stay" name="Comment Multi">
			<DetectSpaces />
			<Detect2Chars attribute="Comment" context="#pop" char="*" char1="/" endRegion="Comment"/>
			<IncludeRules context="##Alerts" />
			<DetectIdentifier />
		</context>
		<context name="Hex" attribute="Hex" lineEndContext="#pop">
			<DetectSpaces context="#pop"/>
			<AnyChar String="1234567890_abcdefABCDEF" context="#stay"/>
			<RegExpr String="." context="#pop" lookAhead="true"/>
		</context>
		<context name="Number" attribute="Number" lineEndContext="#pop">
			<DetectSpaces context="#pop"/>
			<AnyChar String="1234567890_eE+-" context="#stay"/>
			<RegExpr String="." context="#pop" lookAhead="true"/>
		</context>
		<context name="IfDef" attribute="Normal Text"  lineEndContext="#stay">
			<keyword String="ifdef_conditions" attribute="Keyword"/>
			<RegExpr String="\bthen\b" attribute="Keyword" context="#pop"/>
			<DetectIdentifier attribute="Directive"/>
		</context>
		<context name="Include Line" lineEndContext="#pop" attribute="Normal Text">
			<RegExpr attribute="Type" String="\sas\s" context="Namespace Declaration"/>
			<DetectIdentifier context="#stay" attribute="String"/>
		</context>
		<context name="Namespace Declaration" attribute="Directive" lineEndContext="#stay">
			<DetectIdentifier attribute="Directive" context="#pop"/>
		</context>
		<context name="With Directive" attribute="Directive" lineEndContext="#pop">
			<keyword attribute="Type" String="with_directives" context="#stay"/>
			<DetectIdentifier attribute="Directive"/>
			<DetectChar attribute="Hex" context="Hex" char="#"/>
			<HlCHex attribute="Hex" context="Hex"/>
			<Int attribute="Number" context="Number"/>
		</context>
		
		<context name="Memstruct" attribute="Normal Text" lineEndContext="#stay">
			<DetectSpaces/>
			<keyword String="memstruct_primitives" attribute="Type" context="#stay"/>
			<Detect2Chars attribute="Comment" context="Comment" char="-" char1="-"/>
			<Detect2Chars attribute="Comment" context="Comment Multi" char="/" char1="*" beginRegion="Comment"/>
			<RegExpr String="\bend\s+(?:memstruct|memunion)" attribute="Keyword" context="#pop" endRegion="regMemstruct"/>
			<WordDetect String="as" attribute="Keyword" context="#stay"/>
			<DetectChar attribute="Hex" context="Hex" char="#"/>
			<HlCHex attribute="Hex" context="Hex"/>
			<Int attribute="Number" context="Number"/>
		</context>
		
		<context name="Memtype" attribute="Normal Text" lineEndContext="#stay">
			<DetectSpaces/>
			<keyword String="memstruct_primitives" attribute="Type" context="#stay"/>
			<Detect2Chars attribute="Comment" context="Comment" char="-" char1="-"/>
			<Detect2Chars attribute="Comment" context="Comment Multi" char="/" char1="*" beginRegion="Comment"/>
			<DetectChar char="$" attribute="Keyword" context="#pop" endRegion="regMemtype"/>
			<RegExpr String="\bas\b" attribute="Keyword" context="Memtype As"/>
		</context>
		
		<context name="Memtype As" lineEndContext="#stay">
			<DetectIdentifier context="MaybeEndOfList"/>
		</context>
		
		<context name="MaybeEndOfList" lineEndContext="#stay">
			<DetectSpaces/>
			<!--The list keeps going:-->
			<DetectChar char="," context="#pop#pop"/>
			<!--The list is over:-->
			<RegExpr String="." context="#pop#pop#pop" endRegion="#pop"/>
		</context>
		
		<context name="Size Of" attribute="Normal Text" lineEndContext="#stay">
			<keyword String="memstruct_primitives" attribute="Type" context="#stay"/>
			<DetectChar context="#pop" char=")"/>
		</context>
	</contexts>

	<itemDatas>
		<itemData name="Normal Text"     defStyleNum="dsNormal" />
		<itemData name="Keyword"         defStyleNum="dsKeyword" />
		<itemData name="Type"            defStyleNum="dsDataType"/>
		<itemData name="Number"          defStyleNum="dsDecVal" />
		<itemData name="Float"           defStyleNum="dsFloat" spellChecking="false"/>
		<itemData name="Hex"             defStyleNum="dsBaseN" spellChecking="false"/>
		<itemData name="String"          defStyleNum="dsString" />
		<itemData name="Directive"       defStyleNum="dsOthers" />
		<itemData name="Comment"         defStyleNum="dsComment" />
		<itemData name="Region Marker"   defStyleNum="dsRegionMarker" />
		<itemData name="Error"           defStyleNum="dsError" spellChecking="false"/>
		<itemData name="Symbol"          defStyleNum="dsNormal" spellChecking="false"/>
	</itemDatas>

</highlighting>
<general>
	<keywords casesensitive="1" />
	<comments>
	<comment name="singleLine" start="--" />
	<comment name="multiLine" start="/*" end="*/" region="Comment" />
	</comments>
</general>
</language>
