; -!- emf -!-
;
; Created:     2008-06-21
; Modified:    2010-11-02
; Synopsis:    Euphoria 4.0 mode hook
; Authors:     Jeremy Cowgar
;

define-macro fhook-euphoria
    set-variable $buffer-mask "luh1"
    @# buffer-init "euphoria"
    buffer-abbrev-file "euphoria"
    buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-euphoria.setup &reg "/history/fhook/euphoria" "bdfghnopxlqv"
set-variable .fhook-euphoria.setup-mask "abdefghikmnoptuxclqrvy"
set-variable .fhook-euphoria.comment "|--||--|-- | --|r|"
set-variable .fhook-euphoria.comment-1 "|/*| */|*| * | * |fr|"
set-variable .fhook-euphoria.indent-width 4

set-variable .fhook-euphoria.command-flag  "|th|th|"
set-variable .fhook-euphoria.command-name  "||euphoria-test|"
set-variable .fhook-euphoria.command-nbind "|||"
set-variable .fhook-euphoria.command-kbind "|||"
set-variable .fhook-euphoria.command-desc  "||Syntax Check|"

; Setup collapse
set-variable .fhook-euphoria.collapse-open "^\\s*\\(override\\|global\\|public\\|export\\)?\\s*\\(function\\|procedure\\|type\\)\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.collapse-close "^\\s*end\\s+\\(function\\|procedure\\|type\\)"

; Setup item-list

; Override Proc/Func/Type
set-variable .fhook-euphoria.item-list-s1 "^\\s*override\\s+procedure\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r1 "OvrProc \ecB\\1\ecA"
set-variable .fhook-euphoria.item-list-s2 "^\\s*override\\s+function\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r2 "OvrFunc \ecB\\1\ecA"

; Global Proc/Func/Type
set-variable .fhook-euphoria.item-list-s3 "^\\s*global\\s+procedure\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r3 "GlbProc \ecB\\1\ecA"
set-variable .fhook-euphoria.item-list-s4 "^\\s*global\\s+function\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r4 "GlbFunc \ecB\\1\ecA"
set-variable .fhook-euphoria.item-list-s5 "^\\s*global\\s+type\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r5 "GlbType \ecB\\1\ecA"

; Public Proc/Func/Type
set-variable .fhook-euphoria.item-list-s6 "^\\s*public\\s+procedure\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r6 "PubProc \ecB\\1\ecA"
set-variable .fhook-euphoria.item-list-s7 "^\\s*public\\s+function\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r7 "PubFunc \ecB\\1\ecA"
set-variable .fhook-euphoria.item-list-s8 "^\\s*public\\s+type\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r8 "PubType \ecB\\1\ecA"

; Export Proc/Func/Type
set-variable .fhook-euphoria.item-list-s9 "^\\s*export\\s+procedure\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r9 "ExpProc \ecB\\1\ecA"
set-variable .fhook-euphoria.item-list-s10 "^\\s*export\\s+function\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r10 "ExpFunc \ecB\\1\ecA"
set-variable .fhook-euphoria.item-list-s11 "^\\s*export\\s+type\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r11 "ExpType \ecB\\1\ecA"

; Local Proc/Func/Type
set-variable .fhook-euphoria.item-list-s12 "^\\s*procedure\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r12 "LclProc \ecB\\1\ecA"
set-variable .fhook-euphoria.item-list-s13 "^\\s*function\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r13 "LclFunc \ecB\\1\ecA"
set-variable .fhook-euphoria.item-list-s14 "^\\s*type\\s+\\(\\w+\\)"
set-variable .fhook-euphoria.item-list-r14 "LclType \ecB\\1\ecA"

; Setup flags
set-variable .fhook-euphoria.setup-flags   "|l|v|"
set-variable .fhook-euphoria.setup-labels  "|EuDoc highlighting|Highlight bad strings|"

!if &not &exist .hilight.euphoria
    set-variable .hilight.euphoria &pinc .hilight.next 1
!endif
!if &and &sin "h" .fhook-euphoria.setup &band .hilight.flags 0x02
    0 hilight .hilight.euphoria 2 75 $global-scheme

    hilight .hilight.euphoria  2 "^#!/"                  .scheme.header
    hilight .hilight.euphoria  2 "--"                    .scheme.comment
    hilight .hilight.euphoria  2 "--\\s*[Tt][Oo][Dd][Oo]".scheme.error

    hilight .hilight.euphoria 20 "/\\*" "*/" ""          .scheme.comment
    hilight .hilight.euphoria  4 "\"" "\"" "\\"          .scheme.string
    hilight .hilight.euphoria  4 "'" "'" "\\"            .scheme.string
    hilight .hilight.euphoria  4 "`" "`" ""              .scheme.string
    hilight .hilight.euphoria  4 "\"\"\"" "\"\"\"" ""    .scheme.string
    hilight .hilight.euphoria  4 "u\"" "\"" ""           .scheme.string
    hilight .hilight.euphoria  4 "U\"" "\"" ""           .scheme.string
    hilight .hilight.euphoria  4 "x\"" "\"" ""           .scheme.string
    
    !if &sin "v" .fhook-euphoria.setup
        hilight .hilight.euphoria  2 "\"[^\"]*$"             .scheme.error
    !endif

    hilight .hilight.euphoria 1 "export"                 .scheme.keyword
    hilight .hilight.euphoria 1 "public"                 .scheme.keyword
    hilight .hilight.euphoria 1 "global"                 .scheme.keyword
    hilight .hilight.euphoria 1 "override"               .scheme.keyword

    hilight .hilight.euphoria 1 "object"                 .scheme.type
    hilight .hilight.euphoria 1 "sequence"               .scheme.type
    hilight .hilight.euphoria 1 "integer"                .scheme.type
    hilight .hilight.euphoria 1 "atom"                   .scheme.type
    hilight .hilight.euphoria 1 "enum"                   .scheme.type

    hilight .hilight.euphoria 1 "as"                     .scheme.keyword
    hilight .hilight.euphoria 1 "and"                    .scheme.keyword
    hilight .hilight.euphoria 1 "break"                  .scheme.keyword
    hilight .hilight.euphoria 1 "by"                     .scheme.keyword
    hilight .hilight.euphoria 1 "case"                   .scheme.keyword
    hilight .hilight.euphoria 1 "constant"               .scheme.keyword
    hilight .hilight.euphoria 1 "continue"               .scheme.keyword
    hilight .hilight.euphoria 1 "do"                     .scheme.keyword
    hilight .hilight.euphoria 1 "end"                    .scheme.keyword
    hilight .hilight.euphoria 1 "else"                   .scheme.keyword
    hilight .hilight.euphoria 1 "elsif"                  .scheme.keyword
    hilight .hilight.euphoria 1 "exit"                   .scheme.keyword
    hilight .hilight.euphoria 1 "entry"                  .scheme.keyword
    hilight .hilight.euphoria 1 "for"                    .scheme.keyword
    hilight .hilight.euphoria 1 "function"               .scheme.keyword
    hilight .hilight.euphoria 1 "if"                     .scheme.keyword
    hilight .hilight.euphoria 1 "label"                  .scheme.keyword
    hilight .hilight.euphoria 1 "loop"                   .scheme.keyword
    hilight .hilight.euphoria 1 "not"                    .scheme.keyword
    hilight .hilight.euphoria 1 "or"                     .scheme.keyword
    hilight .hilight.euphoria 1 "procedure"              .scheme.keyword
    hilight .hilight.euphoria 1 "return"                 .scheme.keyword
    hilight .hilight.euphoria 1 "retry"                  .scheme.keyword
    hilight .hilight.euphoria 1 "switch"                 .scheme.keyword
    hilight .hilight.euphoria 1 "then"                   .scheme.keyword
    hilight .hilight.euphoria 1 "type"                   .scheme.keyword
    hilight .hilight.euphoria 1 "to"                     .scheme.keyword
    hilight .hilight.euphoria 1 "while"                  .scheme.keyword
    hilight .hilight.euphoria 1 "until"                  .scheme.keyword
    hilight .hilight.euphoria 1 "xor"                    .scheme.keyword

    hilight .hilight.euphoria 1 "elsedef"                .scheme.prepro
    hilight .hilight.euphoria 1 "elsifdef"               .scheme.prepro
    hilight .hilight.euphoria 1 "end ifdef"              .scheme.prepro
    hilight .hilight.euphoria 1 "ifdef"                  .scheme.prepro
    hilight .hilight.euphoria 1 "include"                .scheme.prepro
    hilight .hilight.euphoria 1 "namespace"              .scheme.prepro
    hilight .hilight.euphoria 1 "trace"                  .scheme.prepro
    hilight .hilight.euphoria 1 "with"                   .scheme.prepro
    hilight .hilight.euphoria 1 "without"                .scheme.prepro

    hilight .hilight.euphoria 0 "\\+"                    .scheme.operator
    hilight .hilight.euphoria 0 "-"                      .scheme.operator
    hilight .hilight.euphoria 0 "\\*"                    .scheme.operator
    hilight .hilight.euphoria 0 "/"                      .scheme.operator
    hilight .hilight.euphoria 0 "="                      .scheme.operator
    hilight .hilight.euphoria 0 ">"                      .scheme.operator
    hilight .hilight.euphoria 0 "<"                      .scheme.operator
    hilight .hilight.euphoria 0 "\\.\\."                 .scheme.operator
    hilight .hilight.euphoria 0 "[[]"                    .scheme.operator
    hilight .hilight.euphoria 0 "[]]"                    .scheme.operator

    hilight .hilight.euphoria 1 "[A-Z_][A-Z0-9]+"        .scheme.constant

    ; Hilight numbers
    hilight .hilight.euphoria 1 "[[:digit:]_]+"          .scheme.constant
    hilight .hilight.euphoria 1 "-[[:digit:]_]+"         .scheme.constant
    hilight .hilight.euphoria 1 "0b[01_]+"               .scheme.constant
    hilight .hilight.euphoria 1 "0t[0-7_]+"              .scheme.constant
    hilight .hilight.euphoria 1 "0d[0-9_]+"              .scheme.constant
    hilight .hilight.euphoria 1 "0x[0-9A-Fa-f_]+"        .scheme.constant
    hilight .hilight.euphoria 1 "#[0-9A-Fa-f_]+"         .scheme.constant

    ; Allow Euphoria to be embedded in other languages
    set-variable .hilight.euscript .hilight.euphoria
    
    !if &sin "l" .fhook-euphoria.setup
        ; Highlight comments for eudoc
        !if &not .hilight.eudoc
            set-variable .hilight.eudoc &pinc .hilight.next 1
        !endif
        
        ; Add a hook into the normal Euphoria highlighting. We jump
        ; into eudoc when we see an opening "--**".
        hilight .hilight.euphoria 0x80 "--\\*\\*\\*\\*$" .hilight.eudoc   .scheme.comment
        hilight .hilight.euphoria 0x80 "--\\*\\*$" .hilight.eudoc   .scheme.comment
        
        ; eudoc hilighting starts here
        0 hilight .hilight.eudoc 2 50                              .scheme.comment
        hilight .hilight.eudoc 2 "[A-Za-z0-9 ]+:$"                 .scheme.function
        hilight .hilight.eudoc 2 "-- =+ .*$"                       .scheme.keyword
        hilight .hilight.eudoc 0x44 "\\*\\*" "**" "\\*\\*" "**" "" .scheme.string
        hilight .hilight.eudoc 0x44 "//" "//" "//" "//" ""         .scheme.string
        hilight .hilight.eudoc 0x44 "\\[\\[" "[[" "]]" "]]" ""     .scheme.link
        hilight .hilight.eudoc 0x44 "\\#\\#" "##" "\\#\\#" "##" "" .scheme.string
        hilight .hilight.eudoc 0x44 "{{{" "{{{" "}}}" "}}}" ""     .scheme.string
        hilight .hilight.eudoc 0x80 "^[^-]" .hilight.euphoria      .scheme.comment
    !endif
!endif

!if &sin "d" .fhook-euphoria.setup
    0 indent .hilight.euphoria 0 25

    indent .hilight.euphoria N "^\\s*override\\s*function" t
    indent .hilight.euphoria N "^\\s*global\\s*function" t
    indent .hilight.euphoria N "^\\s*public\\s*function" t
    indent .hilight.euphoria N "^\\s*export\\s*function" t
    indent .hilight.euphoria N "^\\s*function" t
    indent .hilight.euphoria N "^\\s*override\\s*procedure" t
    indent .hilight.euphoria N "^\\s*global\\s*procedure" t
    indent .hilight.euphoria N "^\\s*public\\s*procedure" t
    indent .hilight.euphoria N "^\\s*export\\s*procedure" t
    indent .hilight.euphoria N "^\\s*procedure" t
    indent .hilight.euphoria N "^\\s*global\\s*type" t
    indent .hilight.euphoria N "^\\s*public\\s*type" t
    indent .hilight.euphoria N "^\\s*export\\s*type" t

    ; if statement
    indent .hilight.euphoria N "^\\s*if" t
    indent .hilight.euphoria S "^\\s*elsif" -t
    indent .hilight.euphoria S "^\\s*else" -t
    indent .hilight.euphoria S "^\\s*then" -t

    ; ifdef statement
    indent .hilight.euphoria N "^\\s*ifdef" t
    indent .hilight.euphoria S "^\\s*elsifdef" -t

    ; switch statement
    indent .hilight.euphoria N "^\\s*switch" 2t
    indent .hilight.euphoria S "^\\s*case" -t

    ; loops
    indent .hilight.euphoria N "^\\s*while" t
    indent .hilight.euphoria N "^\\s*for" t
    indent .hilight.euphoria N "^\\s*loop" t
    indent .hilight.euphoria S "^\\s*do" -t
    indent .hilight.euphoria S "^\\s*entry" -t

    ; label
    indent .hilight.euphoria f "^\\s*label " 0

    ; end of most statements
    indent .hilight.euphoria O "^\\s*end\\s+switch" -2t
    indent .hilight.euphoria O "^\\s*end"           -t

    ; Expressions at the end of a line - try with these
    indent .hilight.euphoria c "[-+=*/<>&,]$" t
    indent .hilight.euphoria c "enum$" t
    indent .hilight.euphoria c "constant$" t
    
    indent .hilight.euphoria n "{" t
    indent .hilight.euphoria o "}" -t
    indent .hilight.euphoria n "(" t
    indent .hilight.euphoria o ")" -t

    ; ignores
    indent .hilight.euphoria i "--"
    indent .hilight.euphoria e "/\\*" "\\*/" ""
    indent .hilight.euphoria e "\"" "\"" "\\"
    indent .hilight.euphoria e "\"\"\"" "\"\"\"" ""
    indent .hilight.euphoria e "`" "`" ""

    ; let html based files use the euphoria indent for any ETML scripts
    set-variable .indent.euscript .hilight.euphoria
!endif

define-macro euphoria-test
    set-variable #l0 $buffer-bname
    !force 0 find-buffer "*eusyntest*"
    !if $status
        find-buffer #l0
        popup-window  "*eusyntest*"
        !if &bmod "pipe"
            !return
        !endif
        screen-update
    !endif
    ;!if &not &band @# 2
    ;    set-variable #l0 @ml01 "eui -test - script file"
    !if &seq $buffer-fname ""
        ml-write "[Current buffer has no file name]"
        !abort
    !else
        set-variable #l0 $buffer-fname
    !endif
    !if &band $system 0x100
        12 ipipe-shell-command &spr "eui -test %s %s" #l0 "*eusyntest*"
    !else
        0 ipipe-shell-command &spr "eui -test %s" #l0 "*eusyntest*"
    !endif
    popup-window "*eusyntest*"
    fhook-ipipe
    global-bind-key eusyntest-add-breakpoint "f9"
!emacro

buffer-init-fhook "euphoria"
